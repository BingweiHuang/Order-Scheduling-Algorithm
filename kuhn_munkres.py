import numpy as np
from time import time
from common import get_euclidean_distance, dispatch
from scipy.optimize import linear_sum_assignment
from ctypes import *
import platform
import KM

def kuhn_munkres(mat, maximize):
    # row_ind, col_ind = linear_sum_assignment(mat, maximize)
    # print('row_ind:', row_ind)  # 开销矩阵对应的行索引
    # print('col_ind:', col_ind)  # 对应行索引的最优指派的列索引
    # print('cost:', mat[row_ind, col_ind])  # 提取每个行索引的最优指派列索引所在的元素，形成数组
    # print('cost_sum:', mat[row_ind, col_ind].sum())  # 最小开销

    n = np.size(mat, 0)
    m = np.size(mat, 1)
    # print(n, m, 1 ,1 ,1 ,1 ,1)

    flag = False
    if n <= m:
        flag = True

    num = -1
    if maximize:
        num = 1

    mat = mat.ravel()
    mat = (num * mat).tolist()
    tic = time()

    km = KM.KM(mat, n, m)
    # print('before km compute')

    km.compute()
    # print('after km compute')
    toc = time()

    # print('KM costs {}s'.format(toc - tic))
    # print(km)   #print the weight matrix

    matches = km.getMatch(flag)
    max_w = num * km.maxWeight()

    # return row_ind, col_ind
    return list(matches)

if __name__ == "__main__":
    print(windll.kernel32)
    print(platform.architecture())
    lib = CDLL(".\Kuhn-Munkres")
    print(lib.add(1, 2))

    w = np.array([11.2472, 0.229506, 0.0382638, 0.0381432, 0.0397027, 0.0313909,
                  0.224794, 8.14484, 0.0458661, 0.0453376, 0.0466399, 0.0367264,
                  0.0299137, 0.0354885, 0.163514, 0.149832, 0.138921, 0.0995749,
                  0.0395173, 0.0463618, 21.4613, 0.963952, 0.436966, 0.255043,
                  0.041079, 0.0473524, 0.46014, 0.818429, 15.3917, 0.8489,
                  0.0330598, 0.0378731, 0.264884, 0.380127, 0.944165, 26.4972,
                  0.0391057, 0.0455497, 1.07156, 9.93479, 0.726293, 0.35456,
                  0.0355863, 0.0427534, 0.317523, 0.236992, 0.185949, 0.124624], np.float32).tolist()

    w = np.array([-28.377995885111872, -27.836450085764795, -28.466234156418146, -30.08888568379734, -30.1724377631606, -32.93120452743761, -29.403430513109747, -29.528572393494617, -29.392852042693757, -7.271181341836391, -31.131965120075392, -15.035782970945155, -31.330320915512804, -17.316855467099522, -17.244813328784097, -20.209419051103524, -16.72412287072882, -16.240773236868204, -15.970286335613459, -15.895312712103754, -7.982089493877457, -26.168609374392233, -8.009830230059485, -27.385511443137926, -27.67802365461328, -29.083855590388918, -26.84531514570073, -27.866685660516417, -28.003310341320383, -13.884266561558833, -25.79182258223909, -3.4726572955625246, -26.034270343542055, -5.768992384300732, -5.8206224823757315, -8.682580667688367, -5.09572603713598, -5.181400623987356, -5.085525306127015, -20.26017333565318, -16.00277928441113, -23.709147933202267, -16.09066240035406, -25.493363536509243, -25.709634101321384, -27.83440524292942, -24.847185502270598, -25.532120495145616, -25.556019334948694, -5.370750654148408, -29.660155702666632, -32.01135461289594, -29.71319173014961, -34.23360500899847, -34.332598151922504, -37.039897235106174, -33.546488932871554, -33.7317695495324, -33.61034300810511, -9.832602339471734, -20.925314519047312, -13.76171771435744, -21.12082947245329, -15.852043079127487, -15.995440567262332, -18.55235630144751, -15.168182506352261, -15.563268231227335, -15.50969272322807, -9.817419198004146, -29.836723621852652, -29.491900215414393, -29.91663199434123, -31.75651628828474, -31.83316611764025, -34.61170438104027, -31.07222369663398, -31.168210633733928, -31.024499255605026, -8.900828483864611, -12.818020212894853, -21.552623795830332, -12.942387048919153, -23.117041350456986, -23.367376831826107, -25.232112074803517, -22.50672160699181, -23.343512723520337, -23.41719806119883, -8.574972870860202, -16.15687546252306, -13.195275192489174, -16.37633471847929, -14.730023643601974, -14.979583660558156, -16.901008674034532, -14.11898906967732, -14.972555115056194, -15.058318270160298, -12.664834817399287, -22.534941614040438, -15.79391051858277, -22.713626505415064, -17.983373124219778, -18.09432235223732, -20.773065643262846, -17.295970431716928, -17.549561318441757, -17.45482014395683, -8.161160134259942, -33.65898042870299, -22.196873985284654, -33.81966664179502, -24.509585257945222, -24.461892950309995, -27.428132014379464, -23.891997992442832, -23.499203945628924, -23.243791613009304, -14.419813253671364]).tolist()

    b = (-np.array(w)).tolist()
    tic = time()
    km = KM.KM(w, 12, 10)
    km.compute()
    toc = time()

    print('KM costs {}s'.format(toc - tic))
    # print(km)   #print the weight matrix

    # match = km.getMatch(False) # False 返回列
    match = km.getMatch(True) # True 返回行
    print('Kuhn Munkres match:')
    print(match)

    max_w = km.maxWeight()
    print('Max matching weights: {}'.format(max_w))

    pass